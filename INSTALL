NAME
    INSTALL - Slash Installation

SYNOPSIS
    This document describes how to install Slash 2.0 (code-named "bender").
    For instructions on installation of previous versions of Slash, see the
    INSTALL document included with those distributions.

    These instructions have only been tested on Linux. Installation under
    BSD and other Unix OSes should work similarly. We've had reports of the
    1.0.x version of Slash running on Windows, but have done no testing and
    have no further information.

    PostgreSQL support in Slash 2.0 is currently alpha-quality, while MySQL
    support is beta-quality.

    Slash can always be downloaded from SourceForge, and from the Slashdot
    FTP site.

            http://sourceforge.net/projects/slashcode/
            ftp://ftp.slashdot.org//pub/slash/

    The CVS repository (http://cvs.slashcode.com/) is tagged with version
    numbers, so to get release 1.0.3, use tag "v1_0_3_0". The last number
    (in this case a zero) will be incremented during development
    ("v1_0_3_1", "v1_0_3_2", etc.) until the next release.

    The software and hardware requirements are listed at the end of the
    document, because we know you want to get right into the installation.

UPGRADING
  Slash 2.0.x -> Slash 2.0.y

    Read all of this section before doing any of it.

    The first thing to do is to, as per the instructions below under
    INSTALLATION, unpack the latest distribution and run make and make
    install with the proper arguments.

    Overwriting Changes
        This process will overwrite any customizations of your installed
        modules, or customizations of the installed scripts in
        /usr/local/slash/themes/ and /usr/local/slash/plugins/ (for themes
        and plugins that come with Slash). If you ran install-slashsite with
        the default option of using symlinks, and made customizations to the
        originals instead of breaking the symlink and copying the file over,
        then this will overwrite your changes.

        If you did modify the original instead of a copy, then break the
        symlink, copy over the original (as modified), and then continue.
        The original will be copied over by the new version, and your
        modified copy will remain intact.

    Templates
        With every update, there are changes to templates. But most people
        will modify their templates. A relatively simple way to see what has
        changed is to use template-tool and template-check. This procedure
        should help most users deal with the integration of new templates
        into an existing site (it will only work with the slashcode theme,
        but a simple modification to the code of template-check can fix
        that).

        Dump
            Use template-tool to dump your templates into an empty
            directory.

                    % mkdir templates
                    % cd templates
                    % template-tool -u VIRTUAL_USER -d

            (Defaults to current directory.)

        Compare
            Use template-check to compare installed templates in
            /usr/local/slash/themes/slashcode/ and /usr/local/slash/plugins/
            against the templates that have been dumped.

                    % template-check -u VIRTUAL_USER

            (Defaults to current directory.)

            This will use diff to show you the differences. You can either
            go into the templates with a text editor (in another window) and
            change the dumped ones by hand, edit them by hand in the
            Template Editor via the web browser, or take a note of every
            template you want to copy over your existing template.

            After each directory of templates is done, hit "q" to continue
            to the next plugin/theme.

        Sync
            If you made changes by hand via the web, you are done.
            Otherwise, take the list of templates to update, and pass the
            full filenames to template-tool (this will either be the
            templates you modified by hand in the dump directory, or the
            unmodified ones in the installation directories). You might need
            to put each filename in quotes because of the ";" character in
            the filenames. This will overwrite your existing template with
            the new template.

                    % template-tool -u VIRTUAL_USER -s LIST

    Data
        Currently, there are no differences in the schema between versions
        of Slash 2.0. There are a few data differences.

        Slash 2.0.0-pre1 -> Slash-2.0.0 release
            Journal Data
                In the vars table, "journal_default_display" is set to "0".
                It should default to "10".

                Also, "journal_user_count" is no longer in use and may be
                deleted.

                See plugins/Journal/dump.

            Search Data
                "search_default_display" should be defined in the vars
                table, with a default of "30".

                See plugins/Search/dump.

    Templates
        Listed below are additions/deletions of templates from version to
        version. Feel free to delete (or not) ones that are no longer used,
        but please do add to your site templates that have been added to the
        distribution. Add or delete, for your site, all the changes from
        your current version up through the version you're upgrading to.

        Slash 2.0.0-pre2 -> Slash 2.0.0
            Added
                plugins/Journal/templates/pagination;journal;default
                plugins/Search/templates/pagination;search;default
                themes/slashcode/templates/dispLinkComment;misc;default
            Deleted
                plugins/Journal/templates/journalitem;journal;default
                plugins/Search/templates/linksearch;search;default

  Slash 1.0 -> Slash 2.0

    Please read the complete documentation of utils/slash1toslash2. It is a
    program that will convert your database from Slash 1.0 to a new Slash
    2.0 database. The program documentation (which can be read with perldoc)
    details exactly what process it follows to do the conversion, so you can
    attempt to do it by hand if you prefer.

INSTALLATION
  Installation Notes

    *   For slashd (see utils/slash, which starts slashd), mod_perl (see
        httpd/httpd.conf), and MySQL, we set all processes to run in GMT.
        Then it is easy to convert dates to whatever the user's local time
        is. If you have date offset problems, check that all of these are
        properly set to run in GMT.

    *   You cannot have different versions of the Slash modules installed
        for different sites on the same Apache server. Well, if you want to,
        you can try the Apache::PerlVINC module, but this is not recommended
        for performance reasons. Slash is designed to have one shared core
        of code for all Slash sites on a system. (This is made easier than
        it was in 1.0.x, where to customize a site, you needed to change the
        module code; this should no longer be necessary.)

    *   All of the installation steps below should be executed as root.

  Installation Procedure

    There are six steps to installation. Skip the parts you already have
    installed (making sure you have the correct versions). Make sure to read
    the special note about Apache / mod_perl installation.

    1.  Install MySQL.

        Please refer to MySQL documentation for compilation and/or
        installation notes for any questions with this process. Find the
        script that runs mysql (probably safe_mysqld) and add these lines to
        the beginning of it:

                TZ=GMT
                export TZ

        Create a database to be used by Slash.

        Create a username/password that can access that database (by
        default, we normally set the user to have all permissions, but that
        might not be appropriate for your site).

    2.  Install perl.

        perl is likely already installed on your machine; make sure its
        version is 5.005_03 or better.

    3.  Install Apache and mod_perl.

        You MUST install mod_perl and Apache as directed here. OK, that is
        not strictly true, but it is *mostly* true. If you already have
        mod_perl installed, it is probably not configured properly to work
        with Slash and you will have to rebuild it. [If you are using the
        provided httpd.conf file from the slash distribution, and find that
        Apache is giving you errors, chances are mod_perl is not installed
        correctly, and you need to build it from scratch.] Of course, if you
        have your own Apache modules or build options, you will need to
        modify the instructions here appropriately.

        First, untar apache and mod_perl. Then, go to the mod_perl
        directory, and have mod_perl build and install apache for you:

                perl Makefile.PL APACHE_SRC=/where_you_have_the_source DO_HTTPD=1 \
                        USE_APACI=1 PERL_MARK_WHERE=1 EVERYTHING=1 \
                        APACHE_PREFIX=/where_apache_will_be_installed
                make
                make test
                make install

    4.  Install the Perl modules.

        The best way to do this is with the CPAN module.

        With older versions of the CPAN module, the module will try to
        download and install the latest version of Perl. Watch what the
        module is doing; if it begins to download an entire perl
        distribution, hit ctrl-C until it stops, then try again with the
        CPAN module. (Hopefully, the new CPAN module will have been
        installed by this point in the process. If not, try installing the
        latest CPAN module by hand, and then repeat the process.)

        Sometimes, you will be installing a newer version of a module that
        exists elsewhere on the system. You might want to tell the CPAN
        module to automatically remove older files. To do that from the CPAN
        shell, type:

                cpan> o conf make_install_arg UNINST=1

        You might also wish to install each module by hand, using
        distributions found on the CPAN. See
        http://perldoc.com/m?perlmodinstall for more information on
        installing perl modules.

        Important Notes:

        *   You must have certain libraries existing on your system before
            building, for Compress::Zlib and XML::Parser. See the section on
            "perl".

        *   If running BSD, also install the BSD::Resource module.

        *   If not using MySQL, just allow the installation of its drivers
            to continue, and possibly fail. Then install the driver you need
            (e.g., for PostgreSQL, use "DBD::Pg") using the CPAN shell.

        To use the CPAN module, invoke the CPAN shell:

                perl -MCPAN -e shell

        After it has been configured, install Bundle::Slash:

                cpan> install Bundle::Slash

        To read the README for any module, before or after installing:

                cpan> readme MODULE

        When Bundle::Slash is finished, install the DBIx::Password module:

                cpan> install DBIx::Password

        When asked, give the info for accessing the Slash database created
        in step 1. This is your virtual user information; it is a single
        name that is used to refer to a configuration for connecting to your
        database.

        If you have problems, feel free to re-run "install Bundle::Slash".
        It will safely skip anything already installed.

        To read the documentation of any of the modules, once they have been
        installed, type "perldoc MODULE" at the command line.

    5.  Install Slash.

        Unpack the distribution and go to the new directory that creates,
        and type:

                make
                make install

        Note: this depends on a relatively new version of the install
        program that comes with GNU fileutils distribution. Version 4.0 is
        recommended. Some older versions of SuSE, for example, come with
        version 3; just install the latest fileutils package, or version 4.0
        of install.

        There are a few options to "make" and "make install" you may want to
        change.

                option          default                 purpose
                ==========================================================
                SLASH_PREFIX    /usr/local/slash        Location for
                                                        installed files
                INIT            /etc or /etc/rc.d       Location for init
                                                        scripts
                USER            nobody                  User to own files
                GROUP           nobody                  Group to own files

        (USER and GROUP will also be changed later on a per-site basis, in
        step 6. while running install-slashsite.)

        So, for example, you might type (although the default SLASH_PREFIX
        is _strongly_ recommended):

                make SLASH_PREFIX=/home/slash
                make install SLASH_PREFIX=/home/slash

        When done, a configuration file for Apache will be created at
        $SLASH_PREFIX/slash.conf. You can put its contents into your
        httpd.conf, or you can just "Include" it in your httpd.conf.

        WARNING!

        Please be aware that if you include $SLASH_PREFIX/slash.conf or
        $SLASH_PREFIX/sites/sitename/sitename.conf more than once, or if
        this file shares contents with directives in httpd.conf, that your
        Slash site WILL break. The directives in $SLASH_PREFIX/slash.conf
        should be run only ONCE in any any site context. Read through
        $SLASH_PREFIX/slash.conf to make sure it all looks proper.

    6.  Install your Slash site.

        Go to your installation directory (by default, /usr/local/slash) and
        execute (where "VIRTUAL_USER" is the name of the virtual user given
        in the DBIx::Password distribution):

                bin/install-slashsite VIRTUAL_USER

        The program will prompt for answers to several configuration
        questions. Answer the questions. When done, another configuration
        file will be created at $SLASH_PREFIX/$SITENAME/$SITENAME.conf. You
        can put its contents unto your httpd.conf, or you can just "Include"
        it in your httpd.conf.

        Read the message printed at the end of running install_slashsite.

    7.  Start it up.

        After installation of the site is done, and Apache has been stopped
        and started (do NOT try to restart Apache, but do a full stop and
        start), run slashd. This should be done via the init script:

                /etc/init.d/slash start

        slashd is the daemon that runs routine maintenance on Slash sites,
        including sending out daily mailings, cleaning up the database, and
        updating stories. The init script above will start up an individual
        slashd daemon process process for each installed site.

INSTALLATION OPTIONS
  Multiple Servers

    You can, of course, have a separate database server from your Slash
    server. Further, you can have multiple web servers for one Slash site.
    Slashdot, for instance, has one primary server with all of the code
    (Apache, perl, etc.), and it runs slashd and NFS. Each web server then
    mounts the code read-only over NFS. Some notes:

    *   Make sure the MySQL server allows the user to log in from each web
        server, and the NFS server.

    *   Make sure, if you use the same httpd tree on all machines, that the
        httpd.conf is listening to the proper IP addresses. This can be done
        by putting all of the IP addresses in the conf file, or by having a
        separate Listen file on each machine. Similarly, make sure that each
        web server's logfiles unique to each machine, not written to the NFS
        volumes.

  Virtual Hosts

    Slash has support for virtual hosts, so you can have multiple Slash
    sites on one machine. Simply execute step 6 in the install process for
    each Slash site (after adding a new virtual user to DBIx::Password for
    each).

  SSL

    In Slash, there are two variables for the root URL of the site.
    absolutedir is the full URL, including protocol, while rootdir is the
    URL without protocol:

            absolutedir     http://slashcode.com
            rootdir         //slashcode.com

    absolutedir is used only for creating external links to the site (such
    as in RSS files). rootdir is used for internal links; that way, you can
    use the same HTML pages for SSL and non-SSL. You don't have to do
    anything special to the code or preferences to allow it to work with SSL
    by itself, SSL and non-SSL together, or non-SSL by itself.

  Non-Root

    It is possible to install and run everything here without root.

    Describing the process for a non-root install would take up significant
    space and time, having to account for differences in various systems,
    and all the workarounds necessary for it to work.

    If you must have a non-root install, consult the various documentation
    for Apache, MySQL, and perl about running and installing without root
    access. Then, for Slash, you simply need to set the make variables
    PREFIX, SLASH_PREFIX, and INIT appropriately for your needs.

    Note: Slash (or, more accurately, Apache + mod_perl and MySQL) take up a
    lot of system resources. It is *not advisable* for anyone to run Slash
    at all on a system, without the permission of the administrator of that
    system.

REQUIREMENTS
  Software

    Below, the main software components needed are listed. The recommended
    version is noted, along with the earliest version that has been tested
    (or is expected) to work. The earliest versions are not necessarily
    supported, but should work. perl 5.005_03 is supported, but MySQL 3.22
    is not.

    perl
        Version 5.6.0 (5.005_03).

                http://www.cpan.org/

    MySQL
        Version 3.23 (3.22; 3.23 will be required in Slash 2.2).

                http://www.mysql.com/

    Apache
        Version 1.3.19 (1.3.6).

                http://httpd.apache.org/

    mod_perl
        Versions 1.25 (1.21).

                http://perl.apache.org/

    Sendmail or other transport daemon
        Refer to your OS distribution.

    Perl module distributions
        See http://search.cpan.org/ and http://www.cpan.org/ to get each
        module individually; however, we recommend you download them using
        the CPAN module.

        The latest version of each module is recommended.

        For Compress::Zlib, the zlib development library is required. For
        XML::Parser, the expat library is required. If they are not present
        on the system already, download and install them before installing
        the modules.

                ftp://ftp.freesoftware.com/pub/infozip/zlib/
                http://sourceforge.net/projects/expat/

        The following modules are all included in the Bundle::Slash
        distribution.

        DBI
        Data-ShowTable
        TimeDate
        Msql-Mysql-modules
        ApacheDBI
        Apache-DBILogConfig
        Apache-DBILogger
        libnet
        HTML-Parser
        XML-Parser
        XML-RSS
        MIME-Base64
        Digest-MD5
        URI
        libwww-perl
        DateManip
        File-Spec
        Mail-Sendmail
        Compress-Zlib
        Image-Size
        Storable
        Template

        Also required:
        DBIx-Password

  Hardware

    There are no specific hardware requirements. Apache (with mod_perl) and
    MySQL both take up a lot of RAM; running a complete system with 128MB
    might be possible, if you do some tuning of the configuration, but a
    practical minimum 256MB is recommended, though less could be sufficient
    with some tuning.Storage space depends on how busy you expect the site
    to be; 250MB is possible, but a minimum 1GB is recommended. Necessary
    processor speed is also dependent on how busy the site is; Pentium 133
    or equivalent might work, but less than a Pentium II/200 is not
    recommended.

    For the curious, Slashdot (as of January 2001) runs on eight machines:
    six webservers (each is Pentium III/600, 1GB RAM, 9GB hard drive), one
    NFS server (dual PIII/600, 2GB RAM, 2 x 9GB hard drive), and one
    database server (quad Xeon/550, 2GB RAM, 6 x 9GB hard drive). However,
    this is certainly overkill for most sites (and possibly even overkill
    for Slashdot).

VERSION
    $Id: INSTALL,v 1.23 2001/05/09 16:20:44 pudge Exp $

