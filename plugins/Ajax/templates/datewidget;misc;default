__section__
default
__description__
date line with pop-up calendar
  id = id you want assigned to the outer html element
  start_mode = one of 'day', 'week', 'since', 'all'
  init = name of the js function you want called after the date widget has been constructed
__title__
Date Widget
__page__
misc
__lang__
en_US
__name__
datewidget
__template__
[% IF !start_mode; start_mode = "day"; END %]
<div id="[% id %]" class="date-widget [% start_mode %]">
<div class="date-tab-bar">
  <select class="date-span-popup" onChange="this._widget.handleRangePopupSelect(this)">
    <option value="day" [% IF start_mode=="day" %]selected[% END %]>day of</option>
    <option value="week" [% IF start_mode=="week" %]selected[% END %]>week of</option>
    <option value="since" [% IF start_mode=="since" %]selected[% END %]>since</option>
    <option value="all" [% IF start_mode=="all" %]selected[% END %]>all time</option>
  </select>
  <span class="day date-tab" onClick="this._widget.handleDateTabClick()"><span class="tab-label"></span><div class="tab-button"></div></span>
</div>
<div id="[% id %]-calendar-pane" class="calendar-pane"></div>
</div>
<script type="text/javascript">
  YAHOO.util.Event.addListener(window, "load", function(){ attachDateWidgetTo("[% id %]", "[% start_mode %]" [% IF init; %], undefined, [% init; END %]); });
</script>
__seclev__
10000
__version__
$Id: datewidget;misc;default,v 1.2 2007/04/20 18:51:29 scc Exp $
