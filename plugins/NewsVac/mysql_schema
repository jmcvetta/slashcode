DROP TABLE IF EXISTS keyword;
CREATE TABLE keyword (
  regex char(255) DEFAULT '' NOT NULL,
  weight float(10,2),
  tag char(20),
  PRIMARY KEY (regex)
);

DROP TABLE IF EXISTS robosubmitlock;
CREATE TABLE robosubmitlock (
  x char(1)
);

DROP TABLE IF EXISTS url_analysis;
CREATE TABLE url_analysis (
  url_id int(10) unsigned DEFAULT '0' NOT NULL,
  parse_code enum('html_linkextor','miner','plaintext','nugget'),
  is_success tinyint(4),
  ts timestamp(14),
  duration float(10,2),
  miner_id int(10) unsigned,
  nuggets int(10) unsigned   
);

DROP TABLE IF EXISTS url_content;
CREATE TABLE url_content (
  url_id int(10) unsigned DEFAULT '0' NOT NULL,
  response_header text,
  cookies text,
  PRIMARY KEY (url_id)   
);

DROP TABLE IF EXISTS url_info;
CREATE TABLE url_info (
 url_id int(10) unsigned DEFAULT '0' NOT NULL auto_increment,
  url_digest varchar(16) binary DEFAULT '' NOT NULL,
  url text NOT NULL,
  url_base text,
  is_success tinyint(4),
  last_attempt datetime,
  last_success datetime,
  believed_fresh_until datetime,
  status_code smallint(6),
  reason_phrase varchar(30),
  content_type varchar(60),
  title varchar(255),
  miner_id int(10) unsigned DEFAULT '0' NOT NULL,
  PRIMARY KEY (url_id),
  UNIQUE url_digest (url_digest),
  KEY miner_id (miner_id)    
);

DROP TABLE IF EXISTS url_message_body;
CREATE TABLE url_message_body (
  url_id int(10) unsigned DEFAULT '0' NOT NULL,
  message_body longtext,
  PRIMARY KEY (url_id)
);

DROP TABLE IF EXISTS url_plaintext;
CREATE TABLE url_plaintext (
  url_id int(10) unsigned DEFAULT '0' NOT NULL,
  plaintext longtext,
  PRIMARY KEY (url_id)
);

DROP TABLE IF EXISTS rel;
CREATE TABLE rel (
  rel_id int(10) unsigned DEFAULT '0' NOT NULL auto_increment,
  from_url_id int(10) unsigned DEFAULT '0' NOT NULL,
  to_url_id int(10) unsigned DEFAULT '0' NOT NULL,
  parse_code enum('html_linkextor','miner','nugget','plaintext') DEFAULT 'html_linkextor' NOT NULL,
  type char(20) DEFAULT '' NOT NULL,
  first_verified datetime,
  mark enum('valid','invalid') DEFAULT 'valid' NOT NULL,
  PRIMARY KEY (rel_id),
  UNIQUE from_to_parse_type_tag (from_url_id,to_url_id,parse_code,type),
  KEY type (type)    
);      

DROP TABLE IF EXISTS nugget_sub;
CREATE TABLE nugget_sub (
  url_id int(10) unsigned DEFAULT '0' NOT NULL,
  submitworthy tinyint(3) unsigned,
  PRIMARY KEY (url_id)
);

DROP TABLE IF EXISTS miner;
CREATE TABLE miner (
 miner_id int(10) unsigned DEFAULT '0' NOT NULL auto_increment,
  name varchar(20) DEFAULT '' NOT NULL,
  last_edit timestamp(14),
  last_edit_aid varchar(30),
  owner_aid varchar(30),
  progress enum('broken','ok','great') DEFAULT 'broken' NOT NULL,
  pre_stories_text text,
  post_stories_text text,
  pre_stories_regex text,
  post_stories_regex text,
  extract_vars text,
  extract_regex text,
  tweak_code text,
  comment text,
  PRIMARY KEY (miner_id),
  UNIQUE name (name)    
);

DROP TABLE IF EXISTS spider;
CREATE TABLE spider (
  spider_id int(10) unsigned DEFAULT '0' NOT NULL auto_increment,
  name varchar(20) DEFAULT '' NOT NULL,
  last_edit timestamp(14),
  last_edit_aid varchar(30),
  conditions text,
  group_0_selects text,
  commands text,
  PRIMARY KEY (spider_id),
  UNIQUE name (name)     
);

DROP TABLE IF EXISTS spiderlock;
CREATE TABLE spiderlock (
  x char(1)
);


# Yes, I said "bigint"
DROP TABLE IF EXISTS spider_timespec;
CREATE TABLE spider_timespec (
  timespec_id int(10) unsigned DEFAULT '0' NOT NULL auto_increment,
  name varchar(20) NOT NULL,
  timespec varchar(64) DEFAULT '' NOT NULL,
  last_run bigint DEFAULT 0 NOT NULL,
  PRIMARY KEY (timespec_id),
  UNIQUE identity (name, timespec)
);
