__section__
default
__description__

__title__

__page__
stats
__lang__
en_US
__name__
report
__template__
[%
   # handy sprintf-style formats
   USE format;
   mbytes = format("%0.1f MB");
   ints = format("%8d");
   ints2 = format("%5d");
   ints3 = format("%6d");
   pcts = format("%8d");
   pctsf = format("%.1f");
   flts = format("%.1f");
   flts2 = format("%5.2f");
   dlrs = format("%7.2f");

   stats = Slash.getObject('Slash::Stats');

   BLOCK mbyte;
      bytes = bytes / (1024*1024);
      mbytes(bytes);
   END;

%]

[% reports = {
      'main'      => 'Main Report',
      'mod'       => 'Moderation Report',
      'subscribe' => 'Subscription Report',
      'messages'  => 'Messages Report',
} %]

[% SWITCH form.report;

   CASE 'main';
      reportblock = BLOCK;
      type        = 'area';
      section     = 'all';
      form.stats_days = form.stats_days || 1;

      stats_data_big = stats.getAllStats({ section => section, days => 1}).${section};
      stats_data_key = stats_data_big.keys.sort.0;
      stats_data = stats_data_big.${stats_data_key};

%]
      
<PRE>                   UIDs      IPIDs      Pages 
        total: [% ints(stats_data.unique_users) %]   [% ints(stats_data.unique) %]   [% ints(stats_data.total) %] ([% PROCESS mbyte bytes => stats_data.total_bytes %])
 static total:        -          -    [% ints(stats_data.total_static) %]
gstatic total:        -          -    [% ints(stats_data.grand_total_static) %]
  grand total:        -          -    [% ints(stats_data.grand_total) %] ([% PROCESS mbyte bytes => stats_data.grand_total_bytes %])
 secure total:        -          -    [% ints(stats_data.total_secure) %]
[% IF constants.subscribe %]sbscrbr total:        -          -    [% ints(stats_data.total_subscriber) %]
[% END %]
        posts: [% ints(stats_data.distinct_comment_posters_uids) %]   [% ints(stats_data.distinct_comment_ipids) %]
     comments: [% ints(stats_data.comments_uids) %]   [% ints(stats_data.comments_ipids) %]   [% ints(stats_data.comments_page) %] ([% PROCESS mbyte bytes => stats_data.comments_bytes %])
        index:        -          -   [% ints(stats_data.homepage) %]
     articles: [% ints(stats_data.article_uids) %]   [% ints(stats_data.article_ipids) %]   [% ints(stats_data.article_page) %] ([% PROCESS mbyte bytes => stats_data.article_bytes %])
       search: [% ints(stats_data.search_uids) %]   [% ints(stats_data.search_ipids) %]   [% ints(stats_data.search_page) %] ([% PROCESS mbyte bytes => stats_data.search_bytes %])
     journals: [% ints(stats_data.journal_uids) %]   [% ints(stats_data.journal_ipids) %]   [% ints(stats_data.journal_page) %] ([% PROCESS mbyte bytes => stats_data.journal_bytes %])
         palm: [% ints(stats_data.palm_uids) %]   [% ints(stats_data.palm_ipids) %]   [% ints(stats_data.palm_page) %] ([% PROCESS mbyte bytes => stats_data.palm_bytes %])
          rss: [% ints(stats_data.rss_uids) %]   [% ints(stats_data.rss_ipids) %]   [% ints(stats_data.rss_page) %] ([% PROCESS mbyte bytes => stats_data.rss_bytes %])
     comments: [% ints(stats_data.comments) %] posted yesterday
  submissions: [% ints(stats_data.submissions) %] submissions 
 sub/comments: [% pcts(stats_data.sub_comments) %]% of the submissions came from comment posters from this day

   total hits: [% ints(stats_data.total_hits) %]</PRE>

[%

      PROCESS make_graph gtitle => 'Pages',
         stats   => ['total', 'index_page', 'comments_page', 'article_page'];

      PROCESS make_graph gtitle => 'Hits',
         stats   => ['grand_total', 'rss_page', 'palm_page'];

      PROCESS make_graph gtitle => 'Users',
         type    => 'areapercentage',
         stats   => ['unique', 'unique_users'];

      PROCESS make_graph gtitle => 'Page Bytes',
         type    => 'area',
         stats   => ['total_bytes', 'index_bytes', 'article_bytes', 'comments_bytes'];

      PROCESS make_graph gtitle => 'Total Bytes',
         stats   => ['grand_total_bytes', 'rss_bytes', 'palm_bytes'];

      sections = Slash.db.getDescriptions('sections');
      sect_page = [];
      sect_byte = [];
      FOREACH section = sections.keys.sort;
         sect_page.push(['page', section]);
         sect_byte.push(['bytes', section]);
      END;

      PROCESS make_graph gtitle => 'Section Pages', type => 'lines', stats => sect_page;
      PROCESS make_graph gtitle => 'Section Bytes', type => 'lines', stats => sect_byte;
   END;


   CASE 'messages';
      reportblock = BLOCK;
      type        = 'line';
      section     = 'all';
      form.stats_days = form.stats_days || 1;

      stats_data_big = stats.getAllStats({ section => section, days => 1}).${section};
      stats_data_key = stats_data_big.keys.sort.0;
      stats_data = stats_data_big.${stats_data_key};

      messages = Slash.getObject('Slash::Messages');
      codes = messages.getDescriptions("messagecodes");
      modes = messages.getDescriptions("deliverymodes");

      %]

      [% stats = [];
      FOR code = codes.keys.nsort;
         # skip essentially unused modes 6, 8, 11 for Slashdot
         NEXT IF code == 6 || code == 8 || code == 11;
         stats.push(["msg_$code", "", codes.$code]);
      END;

      PROCESS make_graph gtitle => 'Message Types';

   END;

   CASE 'mod';
      reportblock = BLOCK;
      type        = 'area';
      section     = 'all';
      form.stats_days = form.stats_days || 1;

      stats_data_big = stats.getAllStats({ section => section, days => 1}).${section};
      stats_data_key = stats_data_big.keys.sort.0;
      stats_data = stats_data_big.${stats_data_key};
%]

<PRE>
     comments: [% ints(stats_data.comments) %] posted yesterday
   modlog all: [% ints(stats_data.modlogs) %] rows (not counting [% pctsf(stats_data.modlog_inactive_percent) %]% inactive)
    m2log all: [% ints(stats_data.metamodlogs) %] rows ([% flts(stats_data.xmodlog) %] modlog) (not counting [% pctsf(stats_data.metamodlog_inactive_percent) %]% inactive)
  modlog yest: [% ints(stats_data.modlog_yest) %] rows (not counting [% pctsf(stats_data.modlog_inactive_percent_yest) %]% inactive)
   m2log yest: [% ints(stats_data.metamodlog_yest) %] rows ([% flts(stats_data.xmodlog_yest) %]x modlog) (not counting [% pctsf(stats_data.metamodlog_inactive_percent_yest) %]% inactive)
    consensus: [% ints(stats_data.consensus) %]
   mod points: [% ints(stats_data.mod_points_pool) %] in pool
   mods total: [% ints(stats_data.mod_points_lost_spent) %] yesterday ([% pctsf(stats_data.mod_used_total_pool) %]% of pool, [% pctsf(stats_data.mod_used_total_comments) %]% of comments)
      used -1: [% ints(stats_data.mod_points_lost_spent_minus_1) %] yesterday ([% pctsf(stats_data.mod_points_spent_minus_1_percent) %]%)
      used +1: [% ints(stats_data.mod_points_lost_spent_plus_1) %] yesterday ([% pctsf(stats_data.mod_points_spent_plus_1_percent)  %]%)
    avg spent: [% flts(stats_data.mod_points_avg_spent) %]
token convert: [% ints(stats_data.mod_token_conversion_point) %]
oldest unM2'd: [% IF stats_data.oldest_unm2d_days > -1 %][% ints(stats_data.oldest_unm2d_days) %] days[% ELSE %](n/a)[% END %]
youngest elig: uid [% ints(stats_data.youngest_modelig_uid) %], created on [% stats_data.youngest_modelig_created %]
</PRE>

[%
   END;

   CASE 'subscribe';
      reportblock = BLOCK;
      type        = 'area';
      section     = 'all';
      form.stats_days = form.stats_days || 1;

      stats_data_big = stats.getAllStats({ section => section, days => 1}).${section};
      stats_data_key = stats_data_big.keys.sort.0;
      stats_data = stats_data_big.${stats_data_key};
%]
<PRE>
   Monthly Stats (Average Per Day)
   -------------------------------
            Users   Pages   Payments
New:        [% flts2(stats_data.subscribe_new_users_last30) %]   [% ints2(stats_data.subscribe_new_pages_last30) %]   \$[% dlrs(stats_data.subscribe_new_payments_last30) %]
Renew:      [% flts2(stats_data.subscribe_renew_users_last30) %]   [% ints2(stats_data.subscribe_renew_pages_last30) %]    [% dlrs(stats_data.subscribe_renew_payments_last30) %]
[%- total_users = stats_data.subscribe_new_users_last30 + stats_data.subscribe_renew_users_last30;
    total_pages = stats_data.subscribe_new_pages_last30 + stats_data.subscribe_renew_pages_last30;
    total_pays  = stats_data.subscribe_new_payments_last30 + stats_data.subscribe_renew_payments_last30; -%]
Total:      [% flts2(total_users) %]   [% flts2(total_pages) %]   $[% dlrs(total_pays) %]
Used up:            [% ints2(stats_data.subscribe_hits_bought_last30) %]   $[% dlrs(stats_data.subscribe_dollars_bought_last30) %]
Ran out:    [% flts2(stats_data.subscribe_runout_last30) %]

current subscribers: [% ints3(stats_data.subscribers_current) %]
[%- former_subs = stats_data.subscribers_total - stats_data.subscribers_current; -%]
 former subscribers: [% ints3(former_subs) %]     
  total subscribers: [% ints3(stats_data.subscribers_total) %]    
  new subscriptions: [% ints3(stats_data.subscribe_new_users) %]
</PRE> 
[%
   END;
END %]

[% PROCESS titlebar title => reports.${form.report} _ ' for ' _ constants.sitename, width => '100%' %]

<FORM METHOD="POST" ACTION="[% env.script_name %]">
   [% Slash.createSelect('report', reports, form.report, 1) %]
   &nbsp;&nbsp;Days: [% PROCESS stats_days %]

   <INPUT TYPE="hidden" NAME="op" VALUE="report">
   <INPUT TYPE="submit">
</FORM>

[% reportblock %]
__seclev__
1000
