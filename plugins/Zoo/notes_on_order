*Out of Date*

Just some notes on the rewrite. This may give you a headache 
if you read it but give it a shot if you are curious. SQL statements 
marked with * are the actual SQL calls that will occur.
	-Brian

Cases:
User Marks Person as a Friend
	Check for prior relationship, jump to neutralize and then return to here.

	Update the User's and Person's relationship(see mutual)

	Grab People who consider this user a friend (use for rebuild)
		-SELECT person from people WHERE uid=$user.uid AND type='friend';
	Create FOF flag for these people to person
		-INSERT people_nthdegree (uid,person,friend,type) VALUES ($their_uid, $person, $user.uid, 'fof');
	*INSERT people_nthdegree SELECT person, $person, $user.uid, 'fof' from people WHERE uid=$user.uid AND type='friend';

	Grab person's friends
		-SELECT person from people WHERE uid=$person AND type='friend';
	Create FOF flag for these people in relationship to user
		-INSERT people_nthdegree (uid,person,friend,type) VALUES ($user.uid, $persons_friend, $person, 'fof');
	*INSERT people_nthdegree SELECT $user.uid, person, $person, 'fof' from people WHERE uid=$person AND type='friend'

	Grab person's foes
		-SELECT person from people WHERE uid=$person AND type='foe';
	Create EOF flag for these people in relationship to user
		-INSERT people_nthdegree (uid,person,friend,type) VALUES ($user.uid, $persons_friend, $person, 'eof');
	*INSERT people_nthdegree SELECT $user.uid, person, $person, 'eof' from people WHERE uid=$person AND type='foe';


	Rebuild User
	Add all users to the rebuild list.

User Marks User as a Foe
	Check for prior relationship, jump to neutralize and then return to here.

	Update the User's and Person's relationship (see mutual)

	Grab People who consider this user a friend (use for rebuild)
		-SELECT person from people WHERE uid=$user.uid AND type='friend';
	Create EOF flag for these people to person
		-INSERT people_nthdegree (uid,person,friend,type) VALUES ($their_uid, $person, $user.uid, 'eof');
	*INSERT people_nthdegree (uid,person,friend,type) VALUES SELECT person, $person, $user.uid, 'eof' from people WHERE uid=$user.uid AND type='friend';

	Rebuild User
	Add all users to the rebuild list.

User Marks makes relationship Nuetral
	Find Relationship
	If friend:
		Remove all relationships created by person for user
			-DELETE FROM people_nthdegree WHERE uid=$user.uid AND friend=$person;

		Grab People who consider this user a friend (use for rebuild)
			-SELECT person from people WHERE uid=$user.uid AND type='friend';
		Remove all relationships created by user for friends
			-DELETE FROM people_nthdegree WHERE person=$person AND friend=$user.uid;

		Blank Relationship

		Rebuild User unless subquery
		Add all users to the rebuild list.

	If foe
		Blank Relationship

		Grab People who consider this user a friend (use for rebuild)
			-SELECT person from people WHERE uid=$user.uid AND type='friend';
		Delete EOF flag for these people to person
			-DELETE FROM people_nthdegree WHERE person=$person AND friend=$user.uid;

		Rebuild User unless subquery
		Add all users to the rebuild list.

Rebuild User:
	SELECT person, type from people WHERE uid=$user.uid
	for () {}
	SELECT person, type from people_nthdegree WHERE uid=$user.uid
	for () {}
	setUser($uid, { people => $people };

Blank Relationship
	UPDATE people SET type=NULL WHERE uid=$user.uid AND person=$person;
	UPDATE people SET perceive=NULL WHERE uid=$person AND person=$user.uid;

Mutual
	if ($self->sqlSelect('uid', 'people', "uid = $uid AND person = $person")) {
		$self->sqlUpdate('people', { type => $type }, "uid = $uid AND person = $person");
	} else {
		$self->sqlInsert('people', { uid => $uid,  person => $person, type => $type });
	}


*Extending sqlInsert() to handle SELECT statements is probably a good idea (this is
only the second time I have used them in our code but I do find them quite handy)
