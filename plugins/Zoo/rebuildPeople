#!/usr/bin/perl -w
# This code is a part of Slash, and is released under the GPL.
# Copyright 1997-2002 by Open Source Development Network. See README
# and COPYING for more information, or see http://slashcode.com/.
# $Id: rebuildPeople,v 1.13 2003/02/02 20:14:23 brian Exp $

use strict;
use File::Basename;
use Getopt::Std;
use Slash;
use Slash::DB;
use Slash::Utility;
use Slash::Constants ':people';

use vars qw( $slashdb $werder $constants $junk );

(my $VERSION) = ' $Revision: 1.13 $ ' =~ /\$Revision:\s+([^\s]+)/;
my $PROGNAME = basename($0);

my %opts;
# Remember to doublecheck these match usage()!
usage('Options used incorrectly') unless getopts('hu:v', \%opts);
usage() if $opts{'h'};
$opts{'u'} ||= 'slash';

createEnvironment($opts{u});
$slashdb = getCurrentDB();
$constants = getCurrentStatic();

# First clean up fans/freaks
$slashdb->sqlDo("UPDATE people SET perceive=NULL";
$slashdb->sqlDo("DELETE FROM people WHERE type IS NULL");

# Put in blanks
$slashdb->sqlDo("CREATE TEMPORARY TABLE people_select SELECT person,uid FROM people WHERE type IS NOT NULL");
$slashdb->sqlDo("INSERT IGNORE INTO people (uid,person) SELECT * from people_select");
$slashdb->sqlDo("DROP TABLE people_select");

# Put back fans
$slashdb->sqlDo(qq|SELECT CONCAT("UPDATE people SET perceive='fan' WHERE uid =", person, ";") INTO OUTFILE '/tmp/rebuildpeople.sql' FROM people WHERE type='friend'|);
$slashdb->sqlDo("source /tmp/rebuildpeople.sql");

# Put back freaks
$slashdb->sqlDo(qq|SELECT CONCAT("UPDATE people SET perceive='freak' WHERE uid =", person, ";") INTO OUTFILE '/tmp/rebuildpeople.sql' FROM people WHERE type='foe'|);
$slashdb->sqlDo("source /tmp/rebuildpeople.sql");

$slashdb->sqlDo("TRUNCATE people_nthdegree");
print "Cleaned nthdegree!\n";
my $sth = $slashdb->sqlSelectMany("uid, person, type", "people");
my $count = 0;
my $rows = $sth->rows;
while (my $row = $sth->fetchrow_arrayref) {
	$count++;
	if ($row->[2] eq 'foe') {
		$slashdb->sqlDo("INSERT IGNORE people_nthdegree (uid, person, friend, type) SELECT person, $row->[1], $row->[0], 'eof' from people WHERE uid=$row->[0] AND type='friend' AND person != $row->[1] AND person != $row->[0]");
	} elsif ($row->[2] eq 'friend') {
		$slashdb->sqlDo("INSERT IGNORE people_nthdegree (uid, person, friend, type) SELECT person, $row->[1], $row->[0], 'fof' from people WHERE uid=$row->[0] AND type='friend' AND person != $row->[1]  AND person != $row->[0]");
		$slashdb->sqlDo("INSERT IGNORE people_nthdegree (uid, person, friend, type) SELECT $row->[0], person, $row->[1], 'fof' from people WHERE uid=$row->[1] AND type='friend' AND $row->[0] != person  AND person != $row->[1]");
		$slashdb->sqlDo("INSERT IGNORE people_nthdegree (uid, person, friend, type) SELECT $row->[0], person, $row->[1], 'eof' from people WHERE uid=$row->[1] AND type='foe' AND $row->[0] != person  AND person != $row->[1]");
	}
	print "$count out of $rows\n" if $count < 1000 && (($count % 100) == 0);
	print "$count out of $rows\n" if $count < 10000 && (($count % 1000) == 0);
	print "$count out of $rows\n" if (($count % 10000) == 0);
}
# See, if we only used MySQL 4.X I would just do a UNION :)
my $people = $slashdb->sqlSelectAll('DISTINCT uid', 'people');
my $people2 = $slashdb->sqlSelectAll('DISTINCT uid', 'people_nthdegree');

my %people;

for (@$people) {
	$people{$_->[0]} = 1;
}
for (@$people2) {
	$people{$_->[0]} = 1;
}

my @people = keys %people;

my $zoo = getObject("Slash::Zoo");
for (@people) {
	my $people = $zoo->rebuildUser($_);
	$slashdb->setUser($_, { people => $people});

}

$slashdb->sqlUpdate('vars', { -value => 'now()'}, 'name="zoo_timer"');


sub usage {
	print "*** $_[0]\n" if $_[0];
	# Remember to doublecheck these match getopts()!
	print <<EOT;

Usage: $PROGNAME [OPTIONS] [#users]

This rebuilds the people table for the Zoo system.

Main options:
	-h	Help (this message)
	-v	Version
	-u	Virtual user (default is "slash")

EOT
	exit;
}


sub version {
	print <<EOT;

$PROGNAME $VERSION

This code is a part of Slash, and is released under the GPL.
Copyright 1997-2002 by Open Source Development Network. See README
and COPYING for more information, or see http://slashcode.com/.

EOT
	exit;
}
