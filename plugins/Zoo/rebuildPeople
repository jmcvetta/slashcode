#!/usr/bin/perl -w
# This code is a part of Slash, and is released under the GPL.
# Copyright 1997-2002 by Open Source Development Network. See README
# and COPYING for more information, or see http://slashcode.com/.
# $Id: rebuildPeople,v 1.9 2003/01/20 19:22:25 brian Exp $

use strict;
use File::Basename;
use Getopt::Std;
use Slash;
use Slash::DB;
use Slash::Utility;
use Slash::Constants ':people';

use vars qw( $slashdb $werder $constants $junk );

(my $VERSION) = ' $Revision: 1.9 $ ' =~ /\$Revision:\s+([^\s]+)/;
my $PROGNAME = basename($0);

my %opts;
# Remember to doublecheck these match usage()!
usage('Options used incorrectly') unless getopts('hu:v', \%opts);
usage() if $opts{'h'};
$opts{'u'} ||= 'slash';

createEnvironment($opts{u});
$slashdb = getCurrentDB();
$constants = getCurrentStatic();

my $people = $slashdb->sqlSelectAll("uid, person, type", "people");
$slashdb->sqlDo("DELETE FROM people_nthdegree");
for (@$people) {
	if ($_->[2] eq 'foe') {
		print "$_->[1] is a foe of $_->[0]\n";
		$slashdb->sqlDo("INSERT people_nthdegree (uid, person, friend, type) SELECT person, $_->[1], $_->[0], 'eof' from people WHERE uid=$_->[0] AND type='friend' AND person != $_->[1] AND person != $_->[0]");
	} elsif ($_->[2] eq 'friend') {
		print "$_->[1] is a friend of $_->[0]\n";
		$slashdb->sqlDo("INSERT people_nthdegree (uid, person, friend, type) SELECT person, $_->[1], $_->[0], 'fof' from people WHERE uid=$_->[0] AND type='friend' AND person != $_->[1]  AND person != $_->[0]");
		$slashdb->sqlDo("INSERT people_nthdegree (uid, person, friend, type) SELECT $_->[0], person, $_->[1], 'fof' from people WHERE uid=$_->[1] AND type='friend' AND $_->[0] != person  AND person != $_->[1]");
		$slashdb->sqlDo("INSERT people_nthdegree (uid, person, friend, type) SELECT $_->[0], person, $_->[1], 'eof' from people WHERE uid=$_->[1] AND type='foe' AND $_->[0] != person  AND person != $_->[1]");
	}
}
# See, if we only used MySQL 4.X I would just do a UNION :)
$people = $slashdb->sqlSelectAll('uid', 'people');
my $people2 = $slashdb->sqlSelectAll('uid', 'people_nthdegree');

my %people;

for (@$people) {
	$people{$_->[0]} = 1;
}
for (@$people2) {
	$people{$_->[0]} = 1;
}

my @people = keys %people;

my $zoo = getObject("Slash::Zoo");
for (@people) {
	$zoo->rebuildUser($_);
}

$slashdb->sqlUpdate('vars', { -value => 'now()'}, 'name="zoo_timer"');


sub usage {
	print "*** $_[0]\n" if $_[0];
	# Remember to doublecheck these match getopts()!
	print <<EOT;

Usage: $PROGNAME [OPTIONS] [#users]

This rebuilds the people table for the Zoo system.

Main options:
	-h	Help (this message)
	-v	Version
	-u	Virtual user (default is "slash")

EOT
	exit;
}


sub version {
	print <<EOT;

$PROGNAME $VERSION

This code is a part of Slash, and is released under the GPL.
Copyright 1997-2002 by Open Source Development Network. See README
and COPYING for more information, or see http://slashcode.com/.

EOT
	exit;
}

__END__
